<% content_for :title, "The Gross Profit Podcast - Guest Map" %>

<% content_for :head do %>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  
  <style>
    #map {
      height: 70vh;
      width: 100%;
      border-radius: 0.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      z-index: 1; /* Ensure proper z-index for the map */
    }
    .leaflet-popup-content-wrapper {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 0.5rem;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    .leaflet-popup-content {
      margin: 0.75rem 1rem;
      min-width: 200px;
    }
    .leaflet-popup-content h3 {
      font-size: 1.125rem;
      font-weight: 600;
      margin-top: 0;
      margin-bottom: 0.25rem;
      color: #1F2937;
    }
    .leaflet-popup-content p {
      font-size: 0.875rem;
      color: #4B5563;
      margin-bottom: 0.5rem;
    }
    .leaflet-popup-content .location {
      display: flex;
      align-items: center;
      font-size: 0.875rem;
      color: #6B7280;
    }
    .leaflet-popup-content .location svg {
      margin-right: 0.25rem;
    }
    .leaflet-popup-content .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.25rem;
      margin-top: 0.5rem;
    }
    .leaflet-popup-content .tag {
      background-color: #EFF6FF;
      color: #3B82F6;
      font-size: 0.75rem;
      padding: 0.125rem 0.5rem;
      border-radius: 9999px;
    }
    .leaflet-popup-content .view-profile {
      margin-top: 0.75rem;
      padding-top: 0.5rem;
      border-top: 1px solid #E5E7EB;
      display: flex;
      align-items: center;
    }
    .leaflet-popup-content .view-profile a {
      color: #3B82F6;
      font-size: 0.875rem;
      font-weight: 500;
      text-decoration: none;
      display: flex;
      align-items: center;
    }
    .leaflet-popup-content .view-profile a:hover {
      color: #2563EB;
    }
    .leaflet-popup-content .view-profile a svg {
      margin-left: 0.25rem;
    }
    .custom-marker-podcast {
      background-color: #4F46E5;
      display: block;
      border-radius: 50%;
      border: 2px solid white;
      box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    }
    .custom-marker-regular {
      background-color: #3B82F6;
      display: block;
      border-radius: 50%;
      border: 2px solid white;
      box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    }
  </style>
<% end %>

<div class="container mx-auto px-4 py-8 mt-16">
  <header class="mb-8 text-center">
    <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Guest Map</h1>
    <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
      Explore the global reach of The Gross Profit Podcast and find guests in your area
    </p>
  </header>
  
  <!-- Filters Section -->
  <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8">
    <%= form_with url: map_path, method: :get, class: "space-y-4", id: "map-filters", data: { turbo: true, turbo_frame: "_self" } do |f| %>
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <!-- Specialization filter -->
        <div>
          <label for="specialization_id" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Specialization
          </label>
          <%= select_tag :specialization_id, 
              options_for_select([["All Specializations", ""]] + @specializations.map { |s| [s.name, s.id] }, params[:specialization_id]), 
              class: "block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 py-2 px-3" %>
        </div>

        <!-- Location filter -->
        <div>
          <label for="location" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Location
          </label>
          <%= text_field_tag :location, params[:location], 
              class: "block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 py-2 px-3",
              placeholder: "City, Country, or Region...",
              title: "Search by city, country, or region. Results include exact matches and nearby locations." %>
        </div>
        
        <!-- Guest filter -->
        <div>
          <label for="guest_filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Guest Status
          </label>
          <%= select_tag :guest_filter, 
              options_for_select([
                ["All Profiles", ""], 
                ["Podcast Guests", "podcast_guests"], 
                ["Interested in Procurement", "procurement"]
              ], params[:guest_filter]), 
              class: "block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 py-2 px-3" %>
        </div>

        <!-- Filter button -->
        <div class="flex items-end">
          <%= f.submit "Apply Filters", class: "w-full md:w-auto px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
          <% if params[:specialization_id].present? || params[:location].present? || params[:guest_filter].present? %>
            <%= link_to "Clear Filters", map_path, class: "ml-2 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600" %>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
  
  <!-- Results Stats -->
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
      <%= @profiles.count %> Guests found on the map
      <% if params[:specialization_id].present? || params[:location].present? || params[:guest_filter].present? %>
        <span class="text-sm font-normal text-gray-500 dark:text-gray-400">with applied filters</span>
      <% end %>
    </h2>
    
    <!-- View option links -->
    <div class="text-gray-600 dark:text-gray-400">
      <%= link_to profiles_path(params.permit(:specialization_id, :location, :guest_filter)), class: "inline-flex items-center mr-4" do %>
        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
        </svg>
        List View
      <% end %>
      
      <%= link_to map_path(params.permit(:specialization_id, :location, :guest_filter)), class: "inline-flex items-center text-blue-600 dark:text-blue-400 font-medium" do %>
        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
        </svg>
        Map View
      <% end %>
    </div>
  </div>
  
  <!-- Map Container -->
  <div id="map" class="mb-8">
    <!-- Loading state - will be replaced by the map -->
    <div class="flex items-center justify-center h-70vh bg-gray-100 dark:bg-gray-800 rounded-lg">
      <div class="text-center p-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
        <p class="text-gray-600 dark:text-gray-400">Loading map...</p>
      </div>
    </div>
  </div>
  
  <!-- No profiles message for empty state -->
  <% if @profiles.empty? %>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 text-center mt-8">
      <div class="mx-auto h-24 w-24 text-gray-400 dark:text-gray-600">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      <h3 class="mt-2 text-lg font-medium text-gray-900 dark:text-white">No profiles with location data found</h3>
      <p class="mt-1 text-gray-500 dark:text-gray-400">
        We couldn't find any profiles with geocoded locations matching your criteria.
        Try adjusting your filters or view all profiles in list view.
      </p>
      <div class="mt-6">
        <%= link_to "Clear filters", map_path, class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 mr-3" %>
        <%= link_to "View list instead", profiles_path(params.permit(:specialization_id, :location, :guest_filter)), class: "inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md shadow-sm text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600" %>
      </div>
    </div>
  <% end %>
</div>

<script>
  // Global variables to track map state
  let map = null;
  let markers = [];
  let isMapInitialized = false;
  
  // List of all events that might trigger map initialization
  const mapInitEvents = [
    'DOMContentLoaded',
    'turbo:load',
    'turbo:render',
    'turbo:frame-render',
    'turbo:before-stream-render'
  ];
  
  // Add event listeners for all initialization events
  mapInitEvents.forEach(eventName => {
    document.addEventListener(eventName, () => {
      if (window.location.pathname.includes('/map')) {
        console.log(`Event ${eventName} triggered, initializing map`);
        setTimeout(initializeMap, 100); // Add a small delay to ensure DOM is ready
      }
    });
  });
  
  // Clean up resources before navigation
  document.addEventListener('turbo:before-visit', cleanupMap);
  document.addEventListener('turbo:before-cache', cleanupMap);
  
  // Direct initialization when script loads and pathname matches (fallback)
  if (window.location.pathname.includes('/map') && document.getElementById('map')) {
    console.log('Direct map initialization on script load');
    setTimeout(initializeMap, 300); // Longer delay for initial load
  }
  
  function cleanupMap() {
    console.log('Cleaning up map resources');
    if (map) {
      try {
        // Remove all markers
        markers.forEach(marker => {
          if (marker) map.removeLayer(marker);
        });
        markers = [];
        
        // Remove map
        map.remove();
        map = null;
        isMapInitialized = false;
      } catch (e) {
        console.error('Error cleaning up map:', e);
      }
    }
  }
  
  function initializeMap() {
    // Prevent multiple initializations of the same map
    if (isMapInitialized) {
      console.log('Map already initialized, skipping');
      return;
    }
    
    console.log('Initializing map');
    
    // Get map container element
    const mapContainer = document.getElementById('map');
    if (!mapContainer) {
      console.log('Map container not found');
      return;
    }
    
    // Check if map is visible (sometimes Turbo keeps hidden elements in the DOM)
    if (mapContainer.offsetParent === null) {
      console.log('Map container is not visible, skipping initialization');
      return;
    }
    
    // Clean up any existing map
    cleanupMap();
    
    // Clear map container
    mapContainer.innerHTML = '';
    
    try {
      // Create a new map
      map = L.map('map').setView([37.0902, -95.7129], 3);
      
      // Add OpenStreetMap tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 19
      }).addTo(map);
      
      // Mark as initialized
      isMapInitialized = true;
      
      // Load markers
      loadMarkers();
      
      // Force a resize to ensure map renders correctly
      setTimeout(() => {
        if (map) map.invalidateSize();
      }, 100);
      
      // Setup form handling for filter changes
      setupFormHandlers();
    } catch (e) {
      console.error('Error initializing map:', e);
      isMapInitialized = false;
    }
  }
  
  function setupFormHandlers() {
    // Listen for form submission
    const filterForm = document.getElementById('map-filters');
    if (filterForm) {
      console.log('Setting up form submission listener');
      
      // Remove any existing listeners to prevent duplicates
      const newFilterForm = filterForm.cloneNode(true);
      filterForm.parentNode.replaceChild(newFilterForm, filterForm);
      
      // Add event listener to the new form
      newFilterForm.addEventListener('submit', function(event) {
        console.log('Form submitted directly');
        // We'll let Turbo handle the submission, but also force a reload after
        setTimeout(() => {
          if (map && window.location.pathname.includes('/map')) {
            console.log('Reloading markers after form submission');
            loadMarkers();
          }
        }, 500);
      });
    }
    
    // Listen for select changes to auto-submit the form
    const selects = document.querySelectorAll('#map-filters select');
    selects.forEach(select => {
      select.addEventListener('change', function() {
        console.log('Select changed, auto-submitting form');
        document.getElementById('map-filters').requestSubmit();
      });
    });
  }
  
  function loadMarkers() {
    if (!map) {
      console.error('Cannot load markers: map not initialized');
      return;
    }
    
    console.log('Loading markers');
    
    // Generate current URL with params
    const currentUrl = new URL(window.location.href);
    const jsonUrl = `${currentUrl.pathname}.json${currentUrl.search}`;
    
    // Fetch marker data
    fetch(jsonUrl)
      .then(response => {
        console.log('Markers API response:', response.status);
        return response.json();
      })
      .then(profiles => {
        if (!map) {
          console.error('Map was destroyed during fetch, aborting marker loading');
          return;
        }
        
        console.log('Received', profiles.length, 'profile markers');
        
        // Clear any existing markers
        markers.forEach(marker => {
          if (marker && map) map.removeLayer(marker);
        });
        markers = [];
        
        if (profiles.length === 0) {
          console.log('No markers to display');
          return;
        }
        
        // Create a feature group for bounds calculation
        const markerGroup = L.featureGroup();
        
        // Add new markers
        profiles.forEach(profile => {
          // Skip if missing coordinates
          if (!profile.latitude || !profile.longitude) {
            console.log('Skipping profile without coordinates:', profile.name);
            return;
          }
          
          // Create custom icon based on podcast guest status
          const icon = L.divIcon({
            className: profile.has_podcast ? 'custom-marker-podcast' : 'custom-marker-regular',
            iconSize: [12, 12],
            iconAnchor: [6, 6],
            popupAnchor: [0, -8]
          });
          
          // Create marker and add to map
          const marker = L.marker([profile.latitude, profile.longitude], { icon: icon }).addTo(map);
          
          // Prepare popup content
          const popupContent = `
            <div class="popup-content">
              <h3>${profile.name}</h3>
              ${profile.company ? `<p>${profile.company}</p>` : ''}
              ${profile.headline ? `<p class="italic">${profile.headline}</p>` : ''}
              
              ${profile.location ? `
                <div class="location">
                  <svg class="inline-block h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  ${profile.location}
                </div>
              ` : ''}
              
              ${profile.specializations && profile.specializations.length > 0 ? `
                <div class="tags">
                  ${profile.specializations.map(spec => 
                    `<span class="tag">${spec}</span>`
                  ).join('')}
                </div>
              ` : ''}
              
              <div class="view-profile">
                <a href="${profile.profile_path}">
                  View profile
                  <svg class="inline-block w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                  </svg>
                </a>
              </div>
            </div>
          `;
          
          // Add popup
          marker.bindPopup(popupContent);
          
          // Add to feature group for bounds calculation
          markerGroup.addLayer(marker);
          
          // Store marker reference
          markers.push(marker);
        });
        
        // Fit map to show all markers if there are any
        if (markers.length > 0) {
          map.fitBounds(markerGroup.getBounds(), {
            padding: [50, 50],
            maxZoom: 12
          });
        }
      })
      .catch(error => {
        console.error('Error loading markers:', error);
        const mapContainer = document.getElementById('map');
        if (mapContainer) {
          mapContainer.innerHTML = `
            <div class="flex items-center justify-center h-70vh bg-red-50 dark:bg-red-900/20 rounded-lg">
              <div class="text-center p-8 max-w-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-red-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2">Error Loading Map Data</h3>
                <p class="text-gray-600 dark:text-gray-400">We had trouble retrieving the map data. Please try refreshing the page.</p>
              </div>
            </div>
          `;
        }
      });
  }
</script>