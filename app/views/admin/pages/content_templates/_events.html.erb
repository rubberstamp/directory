<div class="container mx-auto px-4 pt-24 md:pt-32 pb-12">
  <h1 class="text-3xl md:text-4xl font-bold mb-8 text-center text-brand-blue">Events</h1>
  
  <div class="max-w-4xl mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden mb-10">
    <div class="md:flex">
      <div class="p-8">
        <div class="uppercase tracking-wide text-sm text-brand-orange font-semibold">Monthly Event</div>
        <h2 class="mt-1 text-2xl font-semibold text-gray-900 dark:text-white">Fractional CFO Mastermind</h2>
        
        <div class="mt-4 bg-blue-50 dark:bg-gray-700 p-4 rounded-lg">
          <div class="flex items-center mb-2">
            <svg class="w-5 h-5 text-brand-blue mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            <span class="font-semibold">Next Event:</span>
            <span class="ml-2" id="nextEventDate">Calculating...</span>
          </div>
          
          <div class="flex items-center">
            <svg class="w-5 h-5 text-brand-blue mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span class="font-semibold">Time:</span>
            <div class="ml-2">
              <div id="timeGMT">4:30 PM GMT</div>
              <div id="timeEastern">Calculating...</div>
              <div id="timePacific">Calculating...</div>
            </div>
          </div>
        </div>

<script>
  // Initialize event calendar and registration form
  function initializeEventPage() {
    // Calculate the date for the last Wednesday of the next month
    function getLastWednesday() {
      const today = new Date();
      
      // Get next month
      let nextMonth = new Date(today);
      nextMonth.setMonth(today.getMonth() + 1);
      
      // Get the last day of the next month
      const lastDay = new Date(nextMonth.getFullYear(), nextMonth.getMonth() + 1, 0);
      
      // Calculate the last Wednesday (3 is Wednesday in JavaScript's Date where 0 is Sunday)
      const lastDayOfWeek = lastDay.getDay();
      let offset = lastDayOfWeek >= 3 ? lastDayOfWeek - 3 : lastDayOfWeek + 4;
      const lastWednesday = new Date(lastDay);
      lastWednesday.setDate(lastDay.getDate() - offset);
      
      return lastWednesday;
    }
    
    // Format the date in a readable format
    function formatDate(date) {
      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    
    // Format time (12-hour format with AM/PM)
    function formatTime(date) {
      return date.toLocaleTimeString('en-US', { 
        hour: 'numeric', 
        minute: '2-digit', 
        hour12: true 
      });
    }
    
    // Get next event date
    const nextEventDate = getLastWednesday();
    
    // Set the event time (16:30 GMT)
    const eventTimeGMT = new Date(nextEventDate);
    eventTimeGMT.setHours(16, 30, 0, 0);
    
    // Create Eastern time version (GMT-4/5 depending on DST)
    const eventTimeEastern = new Date(eventTimeGMT.toLocaleString('en-US', { timeZone: 'America/New_York' }));
    
    // Create Pacific time version (GMT-7/8 depending on DST)
    const eventTimePacific = new Date(eventTimeGMT.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }));
    
    // Update the HTML elements
    document.getElementById('nextEventDate').textContent = formatDate(nextEventDate);
    document.getElementById('timeGMT').textContent = formatTime(eventTimeGMT) + ' GMT';
    document.getElementById('timeEastern').textContent = formatTime(eventTimeEastern) + ' Eastern';
    document.getElementById('timePacific').textContent = formatTime(eventTimePacific) + ' Pacific';
    
    // Set the event date for the registration form
    document.getElementById('event_date').value = formatDate(nextEventDate);
    
    // Get the CSRF token from the meta tag
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    if (csrfToken) {
      document.getElementById('authenticity_token').value = csrfToken;
    }
    
    // Handle form submission
    const registrationForm = document.getElementById('registrationForm');
    if (registrationForm) {
      registrationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Check if form is valid (HTML5 validation)
        if (!this.checkValidity()) {
          return;
        }
        
        // Create FormData object
        const formData = new FormData(this);
        
        // Submit form via fetch
        fetch('/event_registrations', {
          method: 'POST',
          headers: {
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json',
          },
          body: formData,
          credentials: 'same-origin'
        })
        .then(response => {
          if (response.ok) {
            // Show success message
            document.getElementById('registrationSuccess').classList.remove('hidden');
            document.getElementById('registrationError').classList.add('hidden');
            registrationForm.reset();
          } else {
            // Show error message
            document.getElementById('registrationError').classList.remove('hidden');
            document.getElementById('registrationSuccess').classList.add('hidden');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          document.getElementById('registrationError').classList.remove('hidden');
          document.getElementById('registrationSuccess').classList.add('hidden');
        });
      });
    }
    
    // Check for URL parameters to show success/error messages
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('registration') && urlParams.get('registration') === 'success') {
      const successElement = document.getElementById('registrationSuccess');
      if (successElement) {
        successElement.classList.remove('hidden');
      }
    } else if (urlParams.has('registration') && urlParams.get('registration') === 'error') {
      const errorElement = document.getElementById('registrationError');
      if (errorElement) {
        errorElement.classList.remove('hidden');
      }
    }
    
    // Clear URL parameters after showing messages
    if (urlParams.has('registration')) {
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }
  
  // Run initialization on both DOMContentLoaded and turbo:load events
  document.addEventListener('DOMContentLoaded', initializeEventPage);
  document.addEventListener('turbo:load', initializeEventPage);
  document.addEventListener('turbolinks:load', initializeEventPage);
</script>
        
        <div class="mt-6">
          <h3 class="text-xl font-semibold mb-2 text-gray-800 dark:text-gray-200">How It Works</h3>
          <p class="text-gray-600 dark:text-gray-300 mb-4">
            The Fractional CFO Mastermind is an exclusive monthly gathering for fractional CFOs to connect and collaborate. Each month, we meet on the last Wednesday to discuss challenges and share insights.
          </p>
          
          <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg mb-4">
            <h4 class="font-semibold text-gray-800 dark:text-gray-200 mb-2">Format:</h4>
            <ul class="list-disc list-inside text-gray-600 dark:text-gray-300 space-y-1">
              <li>Participants are placed in small groups of 3-4 peers</li>
              <li>Each participant gets time to present a business challenge</li>
              <li>Fellow CFOs provide feedback and insights</li>
              <li>Exclusive to fractional CFOs</li>
            </ul>
          </div>
          
          <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h4 class="font-semibold text-gray-800 dark:text-gray-200 mb-2">Benefits:</h4>
            <ul class="list-disc list-inside text-gray-600 dark:text-gray-300 space-y-1">
              <li>Get tailored feedback on your specific challenges</li>
              <li>Learn from the experiences of your peers</li>
              <li>Expand your professional network</li>
              <li>Develop new perspectives and strategies</li>
            </ul>
          </div>
        </div>
        
        <div class="mt-8">
          <h3 class="text-xl font-semibold mb-4 text-center text-gray-800 dark:text-gray-200">Register for the Next Session</h3>
          
          <form id="registrationForm" action="/event_registrations" method="post" class="bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md">
            <input type="hidden" name="authenticity_token" value="" id="authenticity_token">
            <input type="hidden" name="event_date" id="event_date" value="">
            
            <div class="mb-4">
              <label for="name" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Name *</label>
              <input type="text" name="name" id="name" required class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-blue dark:bg-gray-800 dark:text-white">
            </div>
            
            <div class="mb-4">
              <label for="email" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Email *</label>
              <input type="email" name="email" id="email" required class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-blue dark:bg-gray-800 dark:text-white">
            </div>
            
            <div class="mb-4">
              <label for="company" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Company</label>
              <input type="text" name="company" id="company" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-blue dark:bg-gray-800 dark:text-white">
            </div>
            
            <div class="mb-4">
              <label for="message" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Message or Questions (Optional)</label>
              <textarea name="message" id="message" rows="3" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-blue dark:bg-gray-800 dark:text-white"></textarea>
            </div>
            
            <div class="text-center">
              <button type="submit" class="bg-brand-orange hover:bg-opacity-90 text-white font-semibold py-3 px-6 rounded-full transition duration-300 shadow-md hover:shadow-lg inline-flex items-center">
                Register
              </button>
            </div>
          </form>
          
          <div id="registrationSuccess" class="hidden mt-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
            <strong class="font-bold">Thank you!</strong>
            <span class="block sm:inline"> We've received your registration and will be in touch soon with more details.</span>
          </div>
          
          <div id="registrationError" class="hidden mt-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <strong class="font-bold">Sorry!</strong>
            <span class="block sm:inline"> There was a problem processing your registration. Please try again or contact us directly.</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

